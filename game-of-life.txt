;This is the setup procedure
to breishis

make "hours-in-day 16

end




to play-game
launch [ forever [move-char 5] ]
launch [forever [wait 50 / level spawn_more]]
end



;moves the char in a certain heading a certain distance :speed
to move-char :speed
let [key readchar]
if (ascii :key) = 28        ;;if left arrow key is pressed
    [seth 270 fd :speed]
if (ascii :key) = 29        ;;if right arrow key is pressed
    [seth 90 fd :speed]
if (ascii :key) = 30        ;;if forward key is pressed
    [seth 0 fd :speed]
if (ascii :key) = 31        ;;if left arrow key is pressed
    [seth 180 fd :speed]
end




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;HELPER FUNCTIONS;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




; spawns an intial good turtle which will be cloned
to spawn-initial-good
newturtle "good
setx random 735     ;random from 0-734 which is world size
sety random 427
setsh pick [love exercise money music]      ;pick a shape from 1-4 which represent good things
giveturtle "type
settype "good       ;give the turtle a good type
st
end

; spawns more good turtles
to spawn-more-good
clone "good
setx random 735     ;random from 0-734 which is world size
sety random 427
setsh pick [love exercise money music]      ;pick a shape from 1-4 which represent good things
settype "good       ;give the turtle a good type
st
end

; spawns an intial good turtle which will be cloned
to spawn-initial-bad
newturtle "bad
setx random 735     ;random from 0-734 which is world size
sety random 427
setsh pick [love exercise money music]      ;pick a shape from 1-4 which represent good things
giveturtle "type
settype "good       ;give the turtle a good type
st
end

; spawns more good turtles
to spawn-more-bad
clone "bad
setx random 735     ;random from 0-734 which is world size
sety random 427
setsh pick [love exercise money music]      ;pick a shape from 1-4 which represent good things
settype "good       ;give the turtle a good type
st
end




; for finding ascii-key values
to show-ascii
let [key readchar]
    show ascii :key
end




;turtle chases the chasee with speed :speed
to chase :chasee :speed

towards :chasee             ;turn towards the chasee

let [dis distance :chasee]      ; get distance to chasee
ifelse (:speed > :dis)      ; if the turtle is close than speed
    [fd :dis ]              ; then move to the turtle
    [fd :speed]         ;if not, move foward speed

end






