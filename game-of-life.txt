to startup
presentationmode
welcome
sleepHoursSelection
play-game
end

;This is the setup procedure
to breishis
reset
make-energy-happiness-turtles
getpage "page1
spawn-creatures
make "hours-of-sleep sleep-reporter
make "hours-left 24 - sleep-reporter
make "secs-in-hour 2
make "energy 90
make "happiness 30
make "acnePlayed? "false
make "sicknessPlayed? "false
make "obesityPlayed? "false
make "carAccidentPlayed? "false
change-clock :hours-left ;;reset the clock
resett
make-energy-happiness-bars
end



to play-game
breishis
game-loop
end

to game-loop
launch [ forever [ wait .5 move-char 5] ]
launch [ forever [ keep-time ] ]
end

to play-another-round
getpage "page1
remove-old-creatures
spawn-new-round-creatures
wait 5
game-loop
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;HELPER PROCEDURES;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;NEW ROUNDS PROCEDURES;;;;;;;;;;;;;;;;;;;;;;;;;
;Removes all good and bad hidden turtles of the previous round
to remove-old-creatures
everyone [if or type = "bad type = "good [remove who] ]
end

;spawns new good and bad creatures
to spawn-new-round-creatures
spawn-num-good 2
spawn-num-bad 2
end

to new-round-clock
make "hours-left 24 - sleep-reporter
make "hours-of-sleep sleep-reporter
end

;;;;;;;;;;;;;END OF NEW ROUNDS PROCEUDRES;;;;;;;;;;;;;;;


;moves the char in a certain heading a certain distance :speed
to move-char :speed
if key? [
main-char,
    let [key readchar]
    if (ascii :key) = 28        ;;if left arrow key is pressed
        [seth 270]
    if (ascii :key) = 29        ;;if right arrow key is pressed
        [seth 90]
    if (ascii :key) = 30        ;;if forward key is pressed
        [seth 0]
    if (ascii :key) = 31        ;;if left arrow key is pressed
        [seth 180]
]
main-char,
fd :speed * (:energy / 80)
end






;;;;;;;;;;;;;;;;;;;;;;BEGIN SPAWN PROCEDURES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to spawn-creatures
spawn-you
spawn-num-good 2        ;Spawns 1 + number you enter good creatues with type good
spawn-num-bad 2     ;Spawns 1 + number you enter bad creatues with type bad
end


; Spawns the main character in the beginning
to spawn-you
newturtle "main-char
giveturtle "type
setx 0
sety 0
st
end



;Spawns good characters
to spawn-num-good :num-good
repeat :num-good [spawn-good]
end

;Spawns bad characters
to spawn-num-bad :num-bad
repeat :num-bad [spawn-bad]
end


; spawns an intial good turtle which will be cloned
to spawn-good
importturtle "good.mwa
setx random 735     ;random from 0-734 which is world size
sety random 427
setsh pick [love exercise money music]      ;pick a shape from 1-4 which represent good things
st
end



; spawns an intial bad turtle which will be cloned
to spawn-bad
importturtle "bad.mwa
setx random 735     ;random from 0-734 which is world size
sety random 427
setsh pick [acne carAccident obesity sickness]      ;pick a shape from 1-4 which represent good things
st
forever [wait .5 chase "main-char 5]
end


;;;;;;;;;;;;;;;;;;;;;;END SPAWN PROCEDURES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;OUTCOME PROCEDURES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to do-good
ht
increase-happiness 20
end

;this function is called from onTouching which reduces energy and plays a video if it hasn't played before
to do-bad
ht          ;hides the bad turtle
decrease-happiness 20
cancel [keep-time]
pause-game  ;pause all processes
play-movie  ;plays the correct movie
unpause-game
end


to play-movie
if and (shape = "acne) not :acnePlayed?
     [
    make "acnePlayed? "true
    getpage "acne
    acne_mov4
    getpage "page1
    ]
if and (shape = "carAccident) not :carAccidentPlayed?
     [
    make "carAccidentPlayed? "true
    getpage "carAccident
    carAccident_mov4
    getpage "page1
]
if and (shape = "sickness) not :sicknessPlayed?
    [
    make "sicknessPlayed? "true
    getpage "sickness
    sickness_mov4
    getpage "page1
]

if and (shape = "obesity) not :obesityPlayed?
         [
    make "obesityPLayed? "true
    getpage "obesity
    obesity_mov4
    getpage "page1
]
end




;;;;;;;;;;;;;;;;;;;;;;END OUTCOME PROCEDURES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;HANDY UTILITIES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; for finding ascii-key values
to show-ascii
let [key readchar]
    show ascii :key
end

to reset
clearnames
newturtle "cleaner
cg
everyone [remove who]
end

to unpause-game
wait 5
game-loop
everyone [ if type = "bad [forever [wait .5 chase "main-char 5]]]
end

to pause-game
;show "game-paused
ask "main-char [
cancel [wait .5 move-char 5] ]
everyone [ if type = "bad [cancel [wait .5 chase "main-char 5]]]
end

;turtle chases the chasee with speed :speed
to chase :chasee :speed

towards :chasee             ;turn towards the chasee

let [dis distance :chasee]      ; get distance to chasee
ifelse (:speed > :dis)      ; if the turtle is close than speed
    [fd :dis ]              ; then move to the turtle
    [fd :speed]         ;if not, move foward speed

end

;;;;;;;;;;;;;;;;;;;;;;END HANDY UTILITIES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;CLOCK PROCEDURES;;;;;;;;;;;;;;;;;

;Changes the time, and then changes the clock in the world
to keep-time
    wait (:secs-in-hour * 10)
    make "hours-left (:hours-left - 1)      ;increment time
    change-clock :hours-left                     ;change clock text

    decrease-energy 2

    if (:hours-left = 0) [
    pause-game
        sleepHoursSelection     ; popup a dialog box asking how much sleep you want
    new-round-clock
        draw-sleep-wave
    cancel [keep-time]
    ]
end

;changes the sleep time, then changes the clock
to keep-sleep-time
   wait (:secs-in-hour * 10)
    make "hours-of-sleep (:hours-of-sleep - 1)      ;increment time
    change-clock :hours-of-sleep                     ;change clock text

    increase-energy 4               ;increase energy for every hour asleep

    if (:hours-of-sleep = 0) [
    cancel [sleep-sound]
    cancel [sleep-cycle]
    play-another-round
    cancel [keep-sleep-time]
    ]


end

to change-clock :hours
ask "clock [
    top                         ;move cursoe to top of page
    repeat count clock [delete]     ;delete all text
    insert (se :hours "hours "left) ;insert new text
]
end
;;;;;;;;;;;END CLOCK PROCEDURES ;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;ENERGY/HAPPINESS BAR PROCEDURES;;;;;;;;;;;;;;;;;
to make-energy-happiness-turtles
newturtle "energy-tracker
giveturtle "type
setx minus (first projectsize) / 2
sety 200
setc 85
st


newturtle "happy-tracker
giveturtle "type
setx minus (first projectsize) / 2
sety 170
setc 45
st
end

to make-energy-happiness-bars
ask "energy-tracker [
    pu
    setx minus (first projectsize) / 2
    sety 200
    setc 85
    seth 90
    setpensize 25
    pd
    fd (:energy / 100) * first projectsize
]

ask "happy-tracker [
    pu
    setx minus (first projectsize) / 2
    sety 170
    setc 45
    seth 90
    setpensize 25
    pd
    fd (:happiness / 100) * first projectsize
]
end


to increase-happiness :ammount
make "happiness :happiness + :ammount   ;increase global happiness

ask "happy-tracker [                        ;change the happiness bar
    setc 45
    fd (:ammount / 100) * first projectsize
]
end


to decrease-happiness :ammount
make "happiness :happiness - :ammount - 1   ;decrease global happiness

ask "happy-tracker [
    setc 0
    fd minus 1 + (:ammount / 100) * first projectsize
]
increase-happiness 1
end


to increase-energy :ammount
if (:energy + :ammount) > 100 [
    let [ammount 100 - :energy]
]

make "energy :energy + :ammount     ;increase global energy

ask "energy-tracker [
    setc 85
    glide ( (:ammount / 100) * first projectsize ) .1
]
end


to decrease-energy :ammount
if (:energy - :ammount) < 0[
    let [ammount :energy]
]

make "energy :energy - :ammount - 1 ;decrease global energy
ask "energy-tracker [
    setc 0
    glide (minus 1 + (:ammount / 100) * first projectsize) 0.1
]
increase-energy 1
end


;;;;;;;;;;;;;;;;END ENERGY/HAPPINESS BAR PROCEDURES;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;SLEEPING PROCEDURES::::::::::::::::::::::::::
to draw-sleep-wave
getpage "sleep
launch [sleep-sound]
cg
everyone [remove who]
make-energy-happiness-turtles   ;make the turtles to draw bars
change-clock :hours-of-sleep        ;reset the clock

newturtle "sleepwave            ;make the turtle to draw sleepwaves
st

reset-sleep-graph

launch [forever [keep-sleep-time]]
relaxed-wakefulness
reset-sleep-graph
stage-1
reset-sleep-graph

launch [forever [sleep-cycle]]

end

to sleep-cycle
if (:hours-of-sleep < 1) [stop]
    stage-2
    reset-sleep-graph
    pu fd 70 pd         ;move foward to not overshoot stop condition
    SWS
    reset-sleep-graph
    stage-2
    reset-sleep-graph
    REM
    reset-sleep-graph
    sleep-cycle
end

to relaxed-wakefulness
change-sleep-stage-text (se "Relaxed "Wakefulness)
repeat 4 [
wave 1 (10 + random 10) 160 10
wave 1 (5 + random 10) 160 5
]

end

to stage-1
change-sleep-stage-text (se "Stage "1)
repeat 4[
wave 1 (5 + random 10) 160 10
wave 1 14 145 15
]
end

to stage-2
change-sleep-stage-text (se "Stage "2)
repeat 2[
wave 1 7 145 20
sleep-spindle
wave 1 4 145 20
k-complex
]
end

to sleep-spindle
wave 1 25 170 30
end

to k-complex
let [down (60 + random 40)
    up (160 + random 80)
    prevy ycor]
rt 170
repeat :down [fd 1 lt .2]
lt 160
repeat :up [fd 1 rt .1]
setheading 180
repeat (:down + :up) [fd 1 lt .05]
setheading 0
fd :prevy - ycor
end

to SWS
if (xcor < (100 - ((first projectsize) / 2)))  [stop]       ;stopping condition

change-sleep-stage-text (se "Slow "Wave "Sleep)


    let [amp random 240 + 10 scaler 2]
    seth 5
    repeat (:amp / :scaler) [fd (1 * :scaler) rt (:scaler  * ((random 5) / 10 - .1))]
    setheading 180
    repeat (:amp / :scaler) [fd (1 * :scaler) lt (:scaler * ((random 5) / 10 -  .1))]

SWS         ;recursive procedure if it hasn't reached the end of the world
end

to REM
if (xcor < (25 - ((first projectsize) / 2)))  [stop]
change-sleep-stage-text (se "REM "-Dream "Sleep)

wave 1 1 140 (1 + random 15)

REM
end

to wave :speed :repeat :angle :amp
rt (180 - :angle - 5) / 2
let [speed (2 * :speed)]
repeat :repeat [
    let [ramp random :amp]
    let [rangle random 11]
    glide :amp + :ramp  :speed
    rt :angle + :rangle
    glide :amp + :ramp :speed
    lt :angle + :rangle
]
lt (180 - :angle - 5) / 2
end

to reset-sleep-graph
cg

make-energy-happiness-bars

ask "sleepwave [
    pu
    setc 1
    setx 30 -  (first projectsize) / 2
    pd
]

end

to change-sleep-stage-text :stage
ask "sleep-stage [
    top                                         ;move cursoe to top of page
    repeat count sleep-stage [delete]     ;delete all text
    insert :stage               ;insert new text
]
end
;;;;;;;;;;;;;;;;;;;;;;;;;;END SLEEPING PROCEDURES::::::::::::::::::::::::::
